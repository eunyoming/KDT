/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-17 08:30:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/sts3_workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Day06_WebSocket/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1757403558891L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<!-- JQuery -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.1.min.js\"\r\n");
      out.write("            integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- 부트스트랩 -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n");
      out.write("          integrity=\"sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("            integrity=\"sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q\"\r\n");
      out.write("            crossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- font-awesome -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css\">\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("        * {\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 컨테이너 */\r\n");
      out.write("       .container {\r\n");
      out.write("		    position: relative; /* 기준점 */\r\n");
      out.write("		    border: 1px solid rgb(0, 0, 0);\r\n");
      out.write("		    border-radius: 5px;\r\n");
      out.write("		    width: 400px;\r\n");
      out.write("		    height: 400px;\r\n");
      out.write("		    margin: auto;\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    flex-direction: column;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 채팅방 */\r\n");
      out.write("		#chatroom {\r\n");
      out.write("		    flex: 1;\r\n");
      out.write("		    overflow: auto;\r\n");
      out.write("		    background-color: #fff;\r\n");
      out.write("		    border-bottom: 1px solid black;\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    flex-direction: column;\r\n");
      out.write("		    align-items: flex-end;\r\n");
      out.write("		    position: relative; /* 이모지 박스 기준점 */\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 숨겨져 있는 이모지 박스 */\r\n");
      out.write("		.emojibox {\r\n");
      out.write("		    position: absolute;\r\n");
      out.write("		    bottom: 20%;\r\n");
      out.write("		    left: 0;\r\n");
      out.write("		    width: 100%;\r\n");
      out.write("		    max-height: 150px;\r\n");
      out.write("		    display: none;\r\n");
      out.write("		    overflow: auto;\r\n");
      out.write("		    border-top: 1px solid #ccc;\r\n");
      out.write("		    background: rgba(255, 255, 255, 0.8); /* 흰색 + 80% 불투명 */\r\n");
      out.write("		    z-index: 10;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 스크롤바 숨기기 */\r\n");
      out.write("        .emojibox::-webkit-scrollbar {\r\n");
      out.write("            width: 2px;\r\n");
      out.write("            /* 가로 스크롤바를 숨기기 */\r\n");
      out.write("            height: 1px;\r\n");
      out.write("            /* 세로 스크롤바를 숨기기 */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 숨겨져 있는 이모지box 이미지들 */\r\n");
      out.write("        .emojibox img {\r\n");
      out.write("		    width: 24%;\r\n");
      out.write("		    height: auto;\r\n");
      out.write("		    cursor: pointer;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 호버 효과 */\r\n");
      out.write("        .emojibox img:hover,\r\n");
      out.write("        .iconBtn:hover,\r\n");
      out.write("        .emojiIcon:hover {\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 채팅입력창 + 버튼 */\r\n");
      out.write("        /* 채팅 입력창 */\r\n");
      out.write("		.chatcraft {\r\n");
      out.write("		    height: 20%;\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 이모지 div */\r\n");
      out.write("        .emojiIcon {\r\n");
      out.write("            width: 10%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            float: left;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            font-size: 20px;\r\n");
      out.write("            color: rgb(218, 128, 245);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 채팅입력 div */\r\n");
      out.write("        .inputchat {\r\n");
      out.write("            width: 70%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            float: left;\r\n");
      out.write("            overflow: auto;\r\n");
      out.write("            background-color: rgb(255, 255, 255);\r\n");
      out.write("            padding: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .inputchat img{\r\n");
      out.write("            max-width: 70px;\r\n");
      out.write("            height: 70px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 채팅방으로 보내지는 메세지 박스 + 시간 */\r\n");
      out.write("        .msgbox {\r\n");
      out.write("		    max-width: 75%;\r\n");
      out.write("		    background: linear-gradient(135deg, #6f45f8, #dc65f6);\r\n");
      out.write("		    color: white;\r\n");
      out.write("		    padding: 5px;\r\n");
      out.write("		    margin: 5px;\r\n");
      out.write("		    border-radius: 10px;\r\n");
      out.write("		\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    flex-direction: column;   /* 세로 정렬 */\r\n");
      out.write("		    align-items: flex-end;    /* 시간은 오른쪽 */\r\n");
      out.write("		    gap: 3px;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        /* 시간 박스 */\r\n");
      out.write("        .timebox {\r\n");
      out.write("            width: 20%;\r\n");
      out.write("            min-width: 50px;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            font-size: 10px;\r\n");
      out.write("            margin-left: 5px;\r\n");
      out.write("\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: end;\r\n");
      out.write("        }\r\n");
      out.write("            \r\n");
      out.write("        /* 채팅방으로 보내지는 div */\r\n");
      out.write("        .msgdiv {\r\n");
      out.write("		    width: 100%;\r\n");
      out.write("		    word-wrap: break-word;\r\n");
      out.write("		    overflow-wrap: break-word;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("        .msgdiv img {\r\n");
      out.write("		    max-width: 70px;\r\n");
      out.write("		    max-height: 70px;\r\n");
      out.write("		    margin: 2px;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        /* 버튼 박스 */\r\n");
      out.write("        .btnBox {\r\n");
      out.write("            border-left: 0px;\r\n");
      out.write("            width: 20%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            float: left;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 아이콘 버튼 */\r\n");
      out.write("        .iconBtn {\r\n");
      out.write("            width: 70%;\r\n");
      out.write("            height: 70%;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            border: 0px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            background-color: rgb(218, 128, 245);\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .fa-paper-plane {\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- contenteditable이 가진 기본 속성 : Enter 입력하면 새로운 div 아래에 만듬. -->\r\n");
      out.write("\r\n");
      out.write("    <!-- 컨테이너 -->\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    	<!-- 채팅방 -->\r\n");
      out.write("	    <div id=\"chatroom\"></div>\r\n");
      out.write("	\r\n");
      out.write("	    <!-- 이모지 박스 (채팅 입력창 위로 이동) -->\r\n");
      out.write("	    <div class=\"emojibox\">\r\n");
      out.write("	        <img src=\"/resources/img/rabbit_1.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/rabbit_2.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/rabbit_3.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/rabbit_4.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/bear_1.png\">\r\n");
      out.write("	        <img src=\"/resources/img/bear_2.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/loopy_1.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/loopy_2.jpg\">\r\n");
      out.write("	        <img src=\"/resources/img/ompang_1.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/ompang_2.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/ompang_3.gif\">\r\n");
      out.write("	        <img src=\"/resources/img/lion1.gif\">\r\n");
      out.write("	    </div>\r\n");
      out.write("	\r\n");
      out.write("	    <!-- 채팅입력창 + 버튼 -->\r\n");
      out.write("	    <div class=\"chatcraft\">\r\n");
      out.write("	        <div class=\"emojiIcon\">\r\n");
      out.write("	            <i class=\"fa-regular fa-face-smile\" id=\"emojiIcon\"></i>\r\n");
      out.write("	        </div>\r\n");
      out.write("	        <div class=\"inputchat\" id=\"inputchat\" contenteditable=\"true\"></div>\r\n");
      out.write("	        <div class=\"btnBox\">\r\n");
      out.write("	            <button type=\"button\" class=\"iconBtn\">\r\n");
      out.write("	                <i class=\"fa-solid fa-paper-plane\" id=\"sendIcon\"></i>\r\n");
      out.write("	            </button>\r\n");
      out.write("	        </div>\r\n");
      out.write("	    </div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("		<a href=\"/login\"><button>로그인</button></a>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    let ws = new WebSocket(\"ws://10.5.5.8/chat\"); // localhost라고 하면 클라이언트의 localhost로 접속되므로 ip 사용\r\n");
      out.write(" 	\r\n");
      out.write("    ws.onmessage = (e)=> {	\r\n");
      out.write("    	// 채팅방으로 보낼 div + 시간 div\r\n");
      out.write("        let msgbox = $(\"<div>\").addClass(\"msgbox\");\r\n");
      out.write("\r\n");
      out.write("        // 현재 시간 가져오기\r\n");
      out.write("        let now = new Date();\r\n");
      out.write("        let timeStr = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n");
      out.write("\r\n");
      out.write("        // 시간 div\r\n");
      out.write("        let timebox = $(\"<div>\").addClass(\"timebox\").text(timeStr);\r\n");
      out.write("\r\n");
      out.write("        // 메세지 div\r\n");
      out.write("        let msgdiv = $(\"<div>\").addClass(\"msgdiv\").html(e.data);\r\n");
      out.write("\r\n");
      out.write("        // 합치기\r\n");
      out.write("        msgbox.append(timebox).append(msgdiv);\r\n");
      out.write("    	$(\"#chatroom\").append(msgbox);\r\n");
      out.write("\r\n");
      out.write("        // 스크롤 제일 아래로 이동\r\n");
      out.write("        $(\"#chatroom\").scrollTop($(\"#chatroom\")[0].scrollHeight);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 공통 함수: 입력값 읽어서 채팅 전송\r\n");
      out.write("    function sendMessage() {\r\n");
      out.write("        let msg = $(\"#inputchat\").html().trim();\r\n");
      out.write("        if (msg === \"\") return; // 빈값이면 무시\r\n");
      out.write("\r\n");
      out.write("        // 서버로 메세지 내용 보내기\r\n");
      out.write("        ws.send(msg);\r\n");
      out.write("\r\n");
      out.write("        // 입력창 비우기\r\n");
      out.write("        $(\"#inputchat\").html(\"\");\r\n");
      out.write("        \r\n");
      out.write("     	// 내가 보낸 메시지 바로 스크롤 내리기\r\n");
      out.write("        $(\"#chatroom\").scrollTop($(\"#chatroom\")[0].scrollHeight);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 엔터 감지\r\n");
      out.write("    $(\"#inputchat\").on(\"keydown\", function (e) {\r\n");
      out.write("        if (e.key === \"Enter\") {\r\n");
      out.write("            e.preventDefault(); // 줄바꿈 막기\r\n");
      out.write("            sendMessage();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 보내기 버튼 클릭 시\r\n");
      out.write("    $(\".iconBtn\").on(\"click\", function () {\r\n");
      out.write("        sendMessage();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("        // 이모지 아이콘 클릭시 이모지 박스 나타났다 사라졌다 하기\r\n");
      out.write("        $(\"#emojiIcon\").on(\"click\", function () {\r\n");
      out.write("            $(\".emojibox\").fadeToggle(500);\r\n");
      out.write("            $(\".emojibox\").css(\"display\", \"inline-block\");\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("        // 이모지 하나 눌렀을 때 채팅 입력창으로 이모지 복사해오기\r\n");
      out.write("		$(document).on(\"click\", \".emojibox img\", function () {\r\n");
      out.write("		    $(\"#inputchat\").append($(this).clone());\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
