package com.kedu.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;

import com.kedu.dao.MessagesDAO;
import com.kedu.dto.MessagesDTO;

@Controller // 파일 옆에 S 붙어 있는 것 : 스프링이 이것을 인스턴스화 시켰다는 의미.
@RequestMapping("/messages")
public class MessagesController {

	@Autowired
	private MessagesDAO dao;

	@RequestMapping("/input")
	public String toInput() {
		return "messages/input";
	}

	@RequestMapping("/output")
	public String toOutput() throws Exception{
		
		dao.selectAll();
		
		return "messages/output";
	}

	@RequestMapping("/inputproc")
	public String inputProc(MessagesDTO dto) throws Exception{ 
		// DS는 무조건 기본 생성자로 DTO를 만든 후 값을 Setter로 세팅한다.

		System.out.println(dto.getSeq() + " : " + dto.getSender() + " : " + dto.getMessage());

		dao.insert(dto);

		// redirect로 가는 이유 : 데이터 털어내기 위해서
		return "redirect:/";
	}
	
	
	// 컨트롤러가 보낸 예외를 DS가 받아서 다시 ExceptionHandler로 보냄.
	// 예외마다 각각 처리를 다르게 하고 싶으면 옆에 원하는 예외 붙이기.
	// 컨트롤러가 많아지면 예외전용 컨트롤러를 만들어서 예외를 처리하게 됨.
	@ExceptionHandler(Exception.class) // 예외계 Object 같은 느낌 모든 예외의 조상
	public String exceptionHandler(Exception e) {
		e.printStackTrace();
		return "redirect:/error";
	}
	
}
