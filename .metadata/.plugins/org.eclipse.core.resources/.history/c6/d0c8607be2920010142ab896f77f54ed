package com.kedu.dao;

import java.util.List;
import java.util.Map;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.stereotype.Repository;

import com.kedu.commons.Config;
import com.kedu.dto.BoardDTO;

@Repository
public class BoardDAO {

	@Autowired
	private SqlSessionTemplate mybatis;

	// insert
	public int addBoard(BoardDTO dto){
		
		return mybatis.insert("Board.insert", dto);

	}

	// select * from board
	public List<BoardDTO> getAllList(){
		return mybatis.selectList("Board.getAllList");
//		try(Connection con = this.getConnection();  //여기는 springJDBC 안쓰시나요?
//				PreparedStatement pst = con.prepareStatement(sql);
//				ResultSet rs = pst.executeQuery();){
//
//			List<BoardDTO> list = new ArrayList<>();
//
//			while(rs.next()) {
//				int seq = rs.getInt("seq");
//				String writer = rs.getString("writer");
//				String title = rs.getString("title");
//				String contents = rs.getString("contents");
//				Timestamp write_date = rs.getTimestamp("write_date");
//				int view_count = rs.getInt("view_count");
//
//				BoardDTO dto = new BoardDTO(seq, writer, title, contents, write_date, view_count);
//				list.add(dto);
//			}
//			return list;
//		}
	}

	// getSelectFromTo / 원하는 게시물 수 만큼 가져오기.
	public List<BoardDTO> getSelectFromTo(Map<String, Integer> param){
		return mybatis.selectList("Board.getSelectFromTo", param);
//		try(Connection con = this.getConnection();
//				PreparedStatement pst = con.prepareStatement(sql)){
//			pst.setInt(1, from);
//			pst.setInt(2, to);
//
//			try(ResultSet rs = pst.executeQuery()){
//
//				List<BoardDTO> list = new ArrayList<>();
//
//				while(rs.next()) {
//					int seq = rs.getInt("seq");
//					String writer = rs.getString("writer");
//					String title = rs.getString("title");
//					String contents = rs.getString("contents");
//					Timestamp write_date = rs.getTimestamp("write_date");
//					int view_count = rs.getInt("view_count");
//
//					BoardDTO dto = new BoardDTO(seq, writer, title, contents, write_date, view_count);
//					list.add(dto);
//				}
//				return list;
//			}
//		}
	}

	// select * from board where seq = ?
	public BoardDTO getListBySeq(int seq) {
		return mybatis.selectOne("Board.getListBySeq", seq);
//		try(Connection con = this.getConnection();
//				PreparedStatement pst = con.prepareStatement(sql);){
//
//			pst.setInt(1, seq);
//
//			try(ResultSet rs = pst.executeQuery();){
//				while(rs.next()) {
//					String writer = rs.getString("writer");
//					String title = rs.getString("title");
//					String contents = rs.getString("contents");
//					Timestamp write_date = rs.getTimestamp("write_date");
//					int view_count = rs.getInt("view_count");
//
//					BoardDTO dto = new BoardDTO(seq, writer, title, contents, write_date, view_count);
//					return dto;
//				}
//				return null;
//			}
//		}
	}

	// delete
	public int deleteBySeq(int seq) {
		return mybatis.delete("Board.deleteBySeq", seq);
	}

	// update
	public int updateBySeq(Map<String, Object> param) {
		return mybatis.update("Board.updateBySeq", param);
//		try(Connection con = this.getConnection();
//				PreparedStatement pst = con.prepareStatement(sql);){
//			pst.setString(1, title);
//			pst.setString(2, contents);
//			pst.setInt(3, seq);
//
//			return pst.executeUpdate();
//		}
	}

	// recordTotalCount
	public int getRecordTotalCount() {
		String sql = "";
		return mybatis.selectOne("Board.getRecordTotalCount");
//		try (Connection con = this.getConnection();
//				PreparedStatement pstat = con.prepareStatement(sql);
//				ResultSet rs = pstat.executeQuery();) {
//
//			rs.next();
//			return rs.getInt(1);
//			//return this.getAllList().size();
//		}
	}

//	public String getPageNavi(int currentPage) throws Exception{
//		// 1. 전체 레코드가 몇 개인지?
//		int recordTotalCount = this.getRecordTotalCount();
//
//		// 2. 한 페이지 당 몇개의 게시글을 보여줄지?
//		int recordCountPerPage = Config.RECORD_COUNT_PER_PAGE;
//
//		// 3. 한 번에 네비게이터를 몇개씩 보여줄지?
//		int naviCountPerPage = Config.NAVI_COUNT_PER_PATE;
//
//		// 4. 전체 몇 페이지가 생성 될 지?
//		int pageTotalCount = 0;
//
//		if(recordTotalCount % recordCountPerPage > 0) { // 나머지가 있으면
//			pageTotalCount = (recordTotalCount / recordCountPerPage) + 1;
//
//		}else {
//			pageTotalCount = recordTotalCount / recordCountPerPage;
//		}
//
//		// 현재 내가 클릭해 둔 페이지
//
//		if(currentPage < 1) { // 음수 값 막기
//			currentPage = 1;
//		}else if(currentPage > pageTotalCount) { // 전체 페이지보다 큰 수 막기
//			currentPage = pageTotalCount;
//		}
//
//		// 네비게이터의 시작 값
//		int startNavi = (currentPage-1) / naviCountPerPage * naviCountPerPage + 1;
//		// 일의 자리를 잘라내는 효과
//
//		// 네비게이터의 끝 값
//		int endNavi = startNavi + (naviCountPerPage - 1);
//
//		if(endNavi > pageTotalCount) { // 전체 페이지 값보다 클 수 없으므로
//			endNavi = pageTotalCount;
//		}
//
//		boolean needPrev = true;
//		boolean needNext = true;
//
//		if(startNavi == 1) { // 시작페이지가 1 이라면
//			needPrev = false;
//		}
//		if(endNavi == pageTotalCount) { // 끝 페이지가 총 페이지와 같다면
//			needNext = false;
//		}
//
//		// String 쉽게 합쳐주는 라이브러리
//		StringBuilder sb = new StringBuilder();
//
//		if(needPrev) {
//			sb.append("<a href='/list.board?cpage=" + (startNavi-1) + "'>< </a>");
//		}
//
//		for(int i = startNavi; i<= endNavi; i++) {
//			sb.append("<a href='/list.board?cpage=" + i + "'>" + i + "</a> ");
//		}
//		if(needNext) {
//			sb.append(" <a href='/list.board?cpage=" + (endNavi+1) + "'> > </a>");
//		}
//
//		return sb.toString();
//	}
	
	public void updateViewCntById(int target) {
        mybatis.update("Board.updateViewCntById", target);
    }
}

