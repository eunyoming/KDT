package com.kedu.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import org.springframework.jdbc.core.JdbcTemplate;

import com.kedu.dto.MembersDTO;

public class MembersDAO {

	private JdbcTemplate jdbc;

	// ID 중복검사
//	public boolean isIdExist(String id) throws Exception{
//		String sql = "select id from members where id like ?";
//
//		try(Connection con = this.getConnection();
//				PreparedStatement pst = con.prepareStatement(sql);){
//
//			pst.setString(1, id);
//
//			try(ResultSet rs = pst.executeQuery();){
//				return rs.next();
//			}
//		}
//	}

	// insert
	public int insert(MembersDTO dto) throws Exception{
		String sql = "insert into members values(?,?,?,?,?,?,?,?,sysdate)";
		
		return jdbc.update(sql, dto.getId(), dto.getPw(), dto.getName(), 
				dto.getPhone(), dto.getEmail(), dto.getZipcode(), 
				dto.getAddress1(), dto.getAddress2());
	}

	// login 성공여부
	public boolean checkLogin(String loginId, String loginPw) throws Exception{
		String sql = "select id, pw from members where id = ? and pw = ?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){
			pst.setString(1, loginId);
			pst.setString(2, loginPw);
			try(ResultSet rs = pst.executeQuery();){
				return rs.next();
			}
		}
	}

	// 회원탈퇴
	public int deleteById(String id) throws Exception{
		String sql = "delete from members where id=?";

		return jdbc.update(sql, id);
	}

	// 회원정보 가져오기
	public MembersDTO getMemberById(String loginId) throws Exception{
		String sql = "select id, name, phone, email, zipcode, address1, address2, join_date from members where id = ?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){

			pst.setString(1, loginId);

			try(ResultSet rs = pst.executeQuery();){

				if(rs.next()) {
					String id = rs.getString("id");
					String name = rs.getString("name");
					String phone = rs.getString("phone");
					String email = rs.getString("email");
					String zipcode = rs.getString("zipcode");
					String address1 = rs.getString("address1");
					String address2 = rs.getString("address2");
					Timestamp join_date = rs.getTimestamp("join_date");
					MembersDTO dto = new MembersDTO(id, null, name, phone, email, zipcode, address1, address2, join_date);

					return dto;

				}else {
					return null;
				}
			}
		}
	}

	// 수정
	public int updateById(MembersDTO dto) throws Exception{
		String sql = "update members set phone=?, email=?, zipcode=?, address1=?, address2=? where id=?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){

			pst.setString(1, dto.getPhone());
			pst.setString(2, dto.getEmail());
			pst.setString(3, dto.getZipcode());
			pst.setString(4, dto.getAddress1());
			pst.setString(5, dto.getAddress2());
			pst.setString(6, dto.getId());

			return pst.executeUpdate();
		}
	}

}
