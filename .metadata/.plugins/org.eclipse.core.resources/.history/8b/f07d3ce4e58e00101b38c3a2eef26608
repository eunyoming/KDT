package com.kedu.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import com.kedu.dto.MembersDTO;

public class MembersDAO {

	private static MembersDAO instance;

	// new 막기
	private MembersDAO() {}

	// getter 만들어주기
	public synchronized static MembersDAO getInstance() {
		if(instance == null) {
			instance = new MembersDAO();
		}
		return instance;
	}

	// get 커넥션 만들어주기
	public Connection getConnection() throws Exception{
		// ctx 인스턴스 생성
		Context ctx = new InitialContext();

		// DataSource 찾아오기
		DataSource ds = (DataSource)ctx.lookup("java:comp/env/jdbc/oracle");
		return ds.getConnection();
	}

	// ID 중복검사
	public boolean isIdExist(String id) throws Exception{
		String sql = "select id from members where id like ?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){

			pst.setString(1, id);

			try(ResultSet rs = pst.executeQuery();){
				return rs.next();
			}
		}
	}

	// insert
	public int insert(MembersDTO dto) throws Exception{
		String sql = "insert into members values(?,?,?,?,?,?,?,?,sysdate)";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){
			pst.setString(1, dto.getId());
			pst.setString(2, dto.getPw());
			pst.setString(3, dto.getName());
			pst.setString(4, dto.getPhone());
			pst.setString(5, dto.getEmail());
			pst.setString(6, dto.getZipcode());
			pst.setString(7, dto.getAddress1());
			pst.setString(8, dto.getAddress2());

			return pst.executeUpdate();
		}
	}

	// login 성공여부
	public boolean checkLogin(String loginId, String loginPw) throws Exception{
		String sql = "select id, pw from members where id=? and pw=?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){
			pst.setString(1, loginId);
			pst.setString(2, loginPw);
			try(ResultSet rs = pst.executeQuery();){
				return rs.next();
			}
		}
	}

	// 회원탈퇴
	public int deleteById(String id) throws Exception{
		String sql = "delete from members where id=?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){
			pst.setString(1, id);

			return pst.executeUpdate();
		}
	}

	// 회원정보 가져오기
	public MembersDTO getMemberById(String loginId) throws Exception{
		String sql = "select id, name, phone, email, zipcode, address1, address2, join_date from members where id = ?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){

			pst.setString(1, loginId);

			try(ResultSet rs = pst.executeQuery();){

				if(rs.next()) {
					String id = rs.getString("id");
					String name = rs.getString("name");
					String phone = rs.getString("phone");
					String email = rs.getString("email");
					String zipcode = rs.getString("zipcode");
					String address1 = rs.getString("address1");
					String address2 = rs.getString("address2");
					Timestamp join_date = rs.getTimestamp("join_date");
					MembersDTO dto = new MembersDTO(id, null, name, phone, email, zipcode, address1, address2, join_date);

					return dto;

				}else {
					return null;
				}
			}
		}
	}

	// 수정
	public int updateById(MembersDTO dto) throws Exception{
		String sql = "update members set phone=?, email=?, zipcode=?, address1=?, address2=? where id=?";

		try(Connection con = this.getConnection();
				PreparedStatement pst = con.prepareStatement(sql);){

			pst.setString(1, dto.getPhone());
			pst.setString(2, dto.getEmail());
			pst.setString(3, dto.getZipcode());
			pst.setString(4, dto.getAddress1());
			pst.setString(5, dto.getAddress2());
			pst.setString(6, dto.getId());

			return pst.executeUpdate();
		}
	}

}
